local resty_rsa = require "resty.rsa"require "suproxy.utils.stringUtils"require "suproxy.utils.pureluapack"local aes = require "resty.aes"local cjson=require("cjson")local rsa_public_key, rsa_priv_key, err = resty_rsa:generate_rsa_keys(2048)print(ngx.STDERR )print(ngx.EMERG  )print(ngx.ALERT  )print(ngx.CRIT   )print(ngx.ERR    )print(ngx.WARN   )print(ngx.NOTICE )print(ngx.INFO   )print(ngx.DEBUG  )
if not rsa_public_key then
    ngx.say('generate rsa keys err: ', err)
end


local bn = require("resty.openssl.bn")local a = bn.new(123456)local b = bn.new(9876)local r
local p=bn.from_binary(string.fromhex([[
FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE65381
FFFFFFFF FFFFFFFF
]]))
-- the followings are equal
r = a:mod_add(b, 3)
r = bn.mod_add(a, b, 3)
r = a:mod_add(9876, 3)
r = bn.mod_add(a, 9876, 3)
r = bn.mod_add(123456, b, 3)
r = bn.mod_exp(12345678, 1234, p)
ngx.say("------------bignum-----------------"..r:to_hex())

ngx.say(rsa_public_key)
ngx.say(rsa_priv_key)
-- SEQUENCE (2 elem)
  -- INTEGER (2048 bit) 254941530263241568487376403266942971953309783392601418675823481571095…
  -- INTEGER 65537local pubkey=
[[
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAyfPdItqWAL0kLjr4C9FJUm1nyRqNePUfAEHZqH+zQDnUmRUnJc/t
YvViQwoBS4O21LbEJJJyA2UQ3LsiCj6l511uTJKjs43jS8uufLamnZkovfnj766V
AQuGLb/LL28kbDNrjEBILG7Z1SjKOMcj8ltt5Jno3hy8QbufK+9nk1AyjvJy2xxg
mAUYOXxI8hYOmIybdL06sKmnqn3CcBjHm5al426f91BgZk0uiaK+8Tq3fVi36fss
o5ZGI3V64zRF+FCE80RvGW3S4ErUm95+SwLRjVav6keCQXYfVHiQ9sacLxjuVve4
/UKjlFztG8+U/ZrIO5GgHEEc8px2s5mqMwIDAQAB
-----END RSA PUBLIC KEY-----
]]

-- SEQUENCE (9 elem)
  -- INTEGER 0
  -- INTEGER (2048 bit) 254941530263241568487376403266942971953309783392601418675823481571095…
  -- INTEGER 65537
  -- INTEGER (2047 bit) 114985682790655012022496591302128069761629062778306991999003101938752…
  -- INTEGER (1024 bit) 167090122729458429818402664861076852489870422669705327032053310800197…
  -- INTEGER (1024 bit) 152577259564304996204173323268742522857442481234100405456884874089546…
  -- INTEGER (1023 bit) 509706842487042880957246452523406386465277551614011764045471991320558…
  -- INTEGER (1023 bit) 592736473825046188162145476665423292483709289747806021473715442318056…
  -- INTEGER (1024 bit) 155684418945757835329794173963456910164853175065409353338223516104982…local privkey=
[[
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAyfPdItqWAL0kLjr4C9FJUm1nyRqNePUfAEHZqH+zQDnUmRUn
Jc/tYvViQwoBS4O21LbEJJJyA2UQ3LsiCj6l511uTJKjs43jS8uufLamnZkovfnj
766VAQuGLb/LL28kbDNrjEBILG7Z1SjKOMcj8ltt5Jno3hy8QbufK+9nk1AyjvJy
2xxgmAUYOXxI8hYOmIybdL06sKmnqn3CcBjHm5al426f91BgZk0uiaK+8Tq3fVi3
6fsso5ZGI3V64zRF+FCE80RvGW3S4ErUm95+SwLRjVav6keCQXYfVHiQ9sacLxju
Vve4/UKjlFztG8+U/ZrIO5GgHEEc8px2s5mqMwIDAQABAoIBAFsWEZxhyJxGsuXj
FPOHjrGNxOzQfBSdQkFEch5sknWaX8g34TNNx/0FPi+MeK8Nlk30rRztrFzZnbRg
9uZ2ATAMVO5WiV031tfd4zI+04FrjhO5fNQjAvO4tek2gzc+wsfGnXBhoevgh4F7
51GaiB0MndEolf5wKXzgWddgIHAxQ3pgqTqBhCvr0h/U0VxGkntqqEDIzRKohB0D
hd5MXP9hCdTTOud9Kfy/2DKl0a8UWC6N5oyT1EhmGI011Fpc3J+svIbd9fPnRo4B
RoAaiKWezYOja6ruRYZo9+GBtjznV1IGlK9EttMv9W5MbCDyFGU4/MoNmal9pAUz
+HrX/aECgYEA7fG5QWYY6YLCs5UEpwC6jxD5uTXR8LA5JP8VxNLHA4/HCY3nXThC
800iEWfdgLtdN3H95KslW+E7WLoT7hdONZKKcGq6zBywa4JawUXt8jMravhN17os
6DTEOHtUE6WETUslJhK0o3232h8wo2dZ99lPiA00Uk8nKUku0CMVULECgYEA2Ub4
iUZKpCHGJ+HjnKINbua36TATBEVY3myr8XBwHDJIAB+LyK+DwJ9QiXJDKnlDGsa8
XEdYaRkUYNIcZgVnTF4s3O1BuGFXBbc7Av+Z85zLtSo/1kDn9YI92Los9APPffdu
UMtbIj9eXqtzVg1DjWcbhZQZAi8uONGEvh+CQiMCgYBIlayFnreKxDDQx2yb5UUD
z5HeReS9H4TPHGFvoTzEgV+eMoOZlEgYIDd8R8ryMjXFbCifUPYciSCpeFoMD1/0
R7ejg2toSHgo06MLwmFLuQBNqWFVpZ19WFtjP3vuYldxnLLAYoRoOzmSeGFF94ki
alAwmJaVZT/1ADYfmBQwgQKBgFRokd0ihZTF2ilcRARxoC5ZS1E37+tU1XVzWkjt
mWAa2IXTu4Y3SUPnoG4FCbrSaRNZ6Ysf3GTX7Wa/uXCY4Mx2OY+KTGHIzvnVeQNt
MO3HGAxFYY9mn7Zs5oHvsc8KO+1/1kdk+P6RB6RXjvL7LCceyz5VjnGeyqIgIyWJ
MB1pAoGBAN2ztGq/yOpNwiCrxeeDpoFe7iQHznaXIgK7yA+uFFUUT58/bl87kq9/
huKG4OgDnZ+iHeSk9CFNseGZHIdcliTDGnud7ipOCFJCzjtlCcM/oHl1hL7oCJUL
GrUlhvtkRKRV96mCDIEGxKCB0xzqjXKAgzTGApCQ9RUKG5EbNSnC
-----END RSA PRIVATE KEY-----
]]local content="12345"local pub, err = resty_rsa:new({ public_key = pubkey })
    if not pub then
        ngx.say("new rsa err: ", err)
        return
    end
    local encrypted, err = pub:encrypt(content)
    if not encrypted then
        ngx.say("failed to encrypt: ", err)
        return
    end
    ngx.say("encrypted data: ", encrypted:hex())

    local priv, err = resty_rsa:new({ private_key = privkey })
    if not priv then
        ngx.say("new rsa err: ", err)
        return
    end
    local decrypted = priv:decrypt(encrypted)
    ngx.say(decrypted == content)

    local algorithm = "SHA1"
    local priv, err = resty_rsa:new({ private_key = privkey, algorithm = algorithm })
    if not priv then
        ngx.say("new rsa err: ", err)
        return
    end

    local str =content
    local sig, err = priv:sign(str)
    if not sig then
        ngx.say("failed to sign:", err)
        return
    end
    ngx.say("sig length: ", sig:hex())

    local pub, err = resty_rsa:new({ public_key = pubkey, algorithm = algorithm })
    if not pub then
        ngx.say("new rsa err: ", err)
        return
    end
    local verify, err = pub:verify(str, sig)
    if not verify then
        ngx.say("verify err: ", err)
        return
    end
    ngx.say(verify)
    
    ngx.say("---------other encrypt---------------")
    local crc_32s, crc_32l
    local key = string.fromhex("c3 7c 6d 5c c2 b9 f5 63 1e 03 d6 93 64 81 8e 0b 4f ea a2 ff")
    
    local str = string.fromhex("00 00 00 2c 1a 05 00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68 98 66 2b bf 28 2b a3 1d a1 d5 6e 06 0f 25 3a ca 6c 9b 1a e8 81 fe 0e 3e 22 97")
    
    local mac_result=string.fromhex("b9 87 85 dd 8f 3e 62 7d be 13 bd c8 d4 11 49 7b ba 1c 8e c1")
    crc_32s = ngx.crc32_short(str)
    crc_32l = ngx.crc32_long(str)
    local hmac = ngx.hmac_sha1(key, str)
    local md5 = ngx.md5(str)
    local md5_bin = ngx.md5_bin(str)
    local sha1_bin = ngx.sha1_bin(str)
    ngx.say("crc_32_short: ", crc_32s, ", crc_32_long: ", crc_32l)
    ngx.say("hmac: ", hmac:hex(1,nil,1))
    ngx.say("md5: ", md5, ", md5_bin: ", ngx.encode_base64(md5_bin))
    ngx.say("sha1_bin: ", ngx.encode_base64(sha1_bin))
    local p=string.fromhex("140000002900004823000018BE000067840000012E637572766532353531392D736861323536406C69627373682E6F72672C656364682D736861322D6E697374703235362C656364682D736861322D6E697374703338342C656364682D736861322D6E697374703532312C6469666669652D68656C6C6D616E2D67726F75702D65786368616E67652D7368613235362C6469666669652D68656C6C6D616E2D67726F75702D65786368616E67652D736861312C6469666669652D68656C6C6D616E2D67726F757031382D7368613531322C6469666669652D68656C6C6D616E2D67726F757031362D7368613531322C6469666669652D68656C6C6D616E2D67726F757031342D7368613235362C6469666669652D68656C6C6D616E2D67726F757031342D736861312C6469666669652D68656C6C6D616E2D67726F7570312D73686131000000717373682D7273612C7273612D736861322D3235362C7273612D736861322D3531322C7373682D6473732C65636473612D736861322D6E697374703235362C65636473612D736861322D6E697374703338342C65636473612D736861322D6E697374703532312C7373682D656432353531390000011963686163686132302D706F6C7931333035406F70656E7373682E636F6D2C6165733132382D6374722C6165733139322D6374722C6165733235362D6374722C6165733132382D67636D406F70656E7373682E636F6D2C6165733235362D67636D406F70656E7373682E636F6D2C6165733132382D6362632C6165733139322D6362632C6165733235362D6362632C336465732D6362632C626C6F77666973682D6362632C636173743132382D6362632C617263666F75722C72696A6E6461656C3132382D6362632C72696A6E6461656C3139322D6362632C72696A6E6461656C3235362D6362632C72696A6E6461656C2D636263406C797361746F722E6C69752E73652C617263666F75723132382C617263666F75723235360000011963686163686132302D706F6C7931333035406F70656E7373682E636F6D2C6165733132382D6374722C6165733139322D6374722C6165733235362D6374722C6165733132382D67636D406F70656E7373682E636F6D2C6165733235362D67636D406F70656E7373682E636F6D2C6165733132382D6362632C6165733139322D6362632C6165733235362D6362632C336465732D6362632C626C6F77666973682D6362632C636173743132382D6362632C617263666F75722C72696A6E6461656C3132382D6362632C72696A6E6461656C3139322D6362632C72696A6E6461656C3235362D6362632C72696A6E6461656C2D636263406C797361746F722E6C69752E73652C617263666F75723132382C617263666F757232353600000178686D61632D736861322D3235362D65746D406F70656E7373682E636F6D2C686D61632D736861322D3531322D65746D406F70656E7373682E636F6D2C686D61632D736861312D65746D406F70656E7373682E636F6D2C686D61632D736861322D3235362C686D61632D736861322D3531322C686D61632D736861312C686D61632D736861312D39362C686D61632D6D64352C686D61632D6D64352D39362C686D61632D726970656D643136302C686D61632D726970656D64313630406F70656E7373682E636F6D2C756D61632D3634406F70656E7373682E636F6D2C756D61632D313238406F70656E7373682E636F6D2C686D61632D736861312D39362D65746D406F70656E7373682E636F6D2C686D61632D6D64352D65746D406F70656E7373682E636F6D2C686D61632D6D64352D39362D65746D406F70656E7373682E636F6D2C756D61632D36342D65746D406F70656E7373682E636F6D2C756D61632D3132382D65746D406F70656E7373682E636F6D2C6E6F6E6500000178686D61632D736861322D3235362D65746D406F70656E7373682E636F6D2C686D61632D736861322D3531322D65746D406F70656E7373682E636F6D2C686D61632D736861312D65746D406F70656E7373682E636F6D2C686D61632D736861322D3235362C686D61632D736861322D3531322C686D61632D736861312C686D61632D736861312D39362C686D61632D6D64352C686D61632D6D64352D39362C686D61632D726970656D643136302C686D61632D726970656D64313630406F70656E7373682E636F6D2C756D61632D3634406F70656E7373682E636F6D2C756D61632D313238406F70656E7373682E636F6D2C686D61632D736861312D39362D65746D406F70656E7373682E636F6D2C686D61632D6D64352D65746D406F70656E7373682E636F6D2C686D61632D6D64352D39362D65746D406F70656E7373682E636F6D2C756D61632D36342D65746D406F70656E7373682E636F6D2C756D61632D3132382D65746D406F70656E7373682E636F6D2C6E6F6E65000000046E6F6E65000000046E6F6E65000000000000000000000000002CA9032100000014")
    
    ngx.say(p:hex(1,nil,8,16," ","    ",1,1,12))
    
     ngx.say("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
local iv1 = string.fromhex("a4 0e 4c 69 d5 13 cf 1c 34 be d0 3c 8e 05 02 ef ea 8c a3 c6"):sub(1,16)local key = string.fromhex("70 ce 46 b4 6c a7 aa af e7 f6 2f 0a df 16 88 e1 be 07 d8 b5"):sub(1,16)
local origin=string.fromhex([[00 00 00 2c 1a 05 00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68 34 4e c9 af 5b c7 21 b8 6e a4 98 cd e2 fa 51 2f db 91 bc a4 7f 41 51 0f c8 fe
]])local text = string.fromhex([[24 2f 2f 83 ac 20 49 c5 c9 f2 fe 92 44 4b 84 6b 8a 8b a7 79 57 42 32 e0 29 26 54 97 a6 7b 4a 5f 68 52 aa f6 86 21 f2 6f c2 9f 84 69 5a 69 77 a9
]])


local aes_128_cbc_with_iv = assert(aes:new(key, nil, aes.cipher(128, "cbc"), {iv=iv1, method=nil,padding=0},nil,0))local mmmm=aes_128_cbc_with_iv:encryptUpdate(origin)
ngx.say("encrypted:"..mmmm:hex(1,nil,1))
ngx.say(mmmm:compare(text))local firstDiff=mmmm:compare(text)
ngx.say("diff:"..mmmm:hex(1,nil,4,16,nil,nil,nil,1,firstDiff))
local mmmm1=aes_128_cbc_with_iv:encryptUpdate(origin)
ngx.say("encrypted2:"..mmmm1:hex(1,nil,1))
local decrypted=aes_128_cbc_with_iv:decryptUpdate(mmmm:sub(1,16))

ngx.say("aesdecrypt"..decrypted:hex(1,nil,1))

 decrypted=aes_128_cbc_with_iv:decryptUpdate(mmmm1)

ngx.say("aesdecrypt2"..decrypted:hex(1,nil,1)) ngx.say("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")local cccc=require("suproxy.tns.crypt")local srv_skey=cccc:getServerKey("12345","aaaa")local enc_key,pass=cccc:Encrypt11g("12345",srv_skey,"aaaa")local a=cccc:Decrypt11g(enc_key,srv_skey,pass,"12345","aaaa")print(a)local cccc=require("suproxy.tns.crypt")local srv_skey=cccc:getServerKey("12345","aaaa")--local enc_key,pass=cccc:Encrypt11g("Aa1234","4EE58184E64306559AC9B1496430D064B2A35F2871D1024978BBD319C68AA2C743A787E6A2D60E0BCEDAD779A7B141C1","703636B92DE0B3D09EE7")--Decrypt11g = function(self, c_sesskey, s_sesskey, auth_password, pass, salt )local a=cccc:Decrypt11g(("E61444CF9802679774624EFF3BC64CB221342A4D67AEE310449DE84197AD26CF8265A2C71419EFD008CBEA859D34846C"):fromhex(),("4EE58184E64306559AC9B1496430D064B2A35F2871D1024978BBD319C68AA2C743A787E6A2D60E0BCEDAD779A7B141C1"):fromhex(),("B11D5337141C3B90F2FF8FCD41EB8086DDA1C63189108EAAE4083CA8E9472B27"):fromhex(),"Aa1234",("703636B92DE0B3D09EE7"):fromhex())ngx.say(a)